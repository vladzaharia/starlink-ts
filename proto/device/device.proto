syntax = "proto3";

package SpaceX.API.Device;

import "spacex_api/common/status/status.proto";

import "spacex_api/device/command.proto";

import "spacex_api/device/common.proto";

import "spacex_api/device/dish.proto";

import "spacex_api/device/transceiver.proto";

import "spacex_api/device/wifi.proto";

import "spacex_api/device/services/unlock/service.proto";

import "google/protobuf/timestamp.proto";

option go_package = "spacex.com/api/device";

message ToDevice {
  oneof message {
    Request request = 1;

    HealthCheck health_check = 2;
  }
}

message FromDevice {
  oneof message {
    Response response = 1;

    Event event = 2;

    HealthCheck health_check = 3;
  }
}

message SensitiveCommand {
  google.protobuf.Timestamp timestamp = 1;

  string target_id = 2;

  oneof request {
    GetLocationRequest get_location = 3;
  }
}

message HealthCheck {
}

message Request {
  reserved 1018, 1025, 1026, 2012, 2016, 3011, 3014, 3202;

  reserved "start_dish_self_test";

  uint64 id = 1;

  uint64 epoch_id = 14;

  string target_id = 13;

  oneof request {
    SignedData signed_request = 15;

    GetNextIdRequest get_next_id = 1006;

    SignedData sensitive_request = 1078;

    AuthenticateRequest authenticate = 1005;

    EnableDebugTelemRequest enable_debug_telem = 1034;

    FactoryResetRequest factory_reset = 1011;

    GetDeviceInfoRequest get_device_info = 1008;

    GetHistoryRequest get_history = 1007;

    GetLogRequest get_log = 1012;

    GetNetworkInterfacesRequest get_network_interfaces = 1015;

    GetPingRequest get_ping = 1009;

    PingHostRequest ping_host = 1016;

    GetStatusRequest get_status = 1004;

    RebootRequest reboot = 1001;

    SetSkuRequest set_sku = 1013;

    SetTrustedKeysRequest set_trusted_keys = 1010;

    SpeedTestRequest speed_test = 1003;

    UpdateRequest update = 1014;

    GetLocationRequest get_location = 1017;

    GetHeapDumpRequest get_heap_dump = 1019;

    RestartControlRequest restart_control = 1020;

    FuseRequest fuse = 1021;

    GetPersistentStatsRequest get_persistent_stats = 1022;

    GetConnectionsRequest get_connections = 1023;

    StartSpeedtestRequest start_speedtest = 1027;

    GetSpeedtestStatusRequest get_speedtest_status = 1028;

    ReportClientSpeedtestRequest report_client_speedtest = 1029;

    InitiateRemoteSshRequest initiate_remote_ssh = 1030 [deprecated = true];

    SelfTestRequest self_test = 1031;

    SetTestModeRequest set_test_mode = 1032;

    SoftwareUpdateRequest software_update = 1033;

    IQCaptureRequest iq_capture = 1035;

    GetRadioStatsRequest get_radio_stats = 1036;

    GetTimeRequest time = 1037;

    RunIperfServerRequest run_iperf_server = 1038;

    TcpConnectivityTestRequest tcp_connectivity_test = 1039;

    UdpConnectivityTestRequest udp_connectivity_test = 1040;

    GetGoroutineStackTracesRequest get_goroutine_stack_traces = 1041;

    DishStowRequest dish_stow = 2002;

    DishGetContextRequest dish_get_context = 2003;

    DishGetObstructionMapRequest dish_get_obstruction_map = 2008;

    DishSetEmcRequest dish_set_emc = 2007;

    DishGetEmcRequest dish_get_emc = 2009;

    DishSetConfigRequest dish_set_config = 2010;

    DishGetConfigRequest dish_get_config = 2011;

    DishPowerSaveRequest dish_power_save = 2013;

    DishInhibitGpsRequest dish_inhibit_gps = 2014;

    DishGetDataRequest dish_get_data = 2015;

    DishClearObstructionMapRequest dish_clear_obstruction_map = 2017;

    DishSetMaxPowerTestModeRequest dish_set_max_power_test_mode = 2018;

    DishActivateRssiScanRequest dish_activate_rssi_scan = 2019;

    DishGetRssiScanResultRequest dish_get_rssi_scan_result = 2020;

    DishFactoryResetRequest dish_factory_reset = 2021;

    ResetButtonRequest reset_button = 2022;

    SoftwareUpdateRequest set_per_vehicle_config = 2023;

    DishAviationTestRequest dish_aviation_test = 2024;

    DishInhibitRfRequest dish_inhibit_rf = 2026;

    WifiGetClientsRequest wifi_get_clients = 3002;

    WifiGetPingMetricsRequest wifi_get_ping_metrics = 3007;

    WifiSetConfigRequest wifi_set_config = 3001;

    WifiGetConfigRequest wifi_get_config = 3009;

    WifiSetupRequest wifi_setup = 3003;

    WifiSetMeshDeviceTrustRequest wifi_set_mesh_device_trust = 3012;

    WifiSetMeshConfigRequest wifi_set_mesh_config = 3013 [deprecated = true];

    WifiGetClientHistoryRequest wifi_get_client_history = 3015;

    WifiSetClientGivenNameRequest wifi_set_client_given_name = 3017;

    WifiSetAviationConformedRequest wifi_set_aviation_conformed = 3016;

    WifiSelfTestRequest wifi_self_test = 3018;

    WifiRunSelfTestRequest wifi_run_self_test = 3028;

    WifiCalibrationModeRequest wifi_calibration_mode = 3019;

    WifiGuestInfoRequest wifi_guest_info = 3020;

    WifiRfTestRequest wifi_rf_test = 3021;

    WifiGetFirewallRequest wifi_get_firewall = 3024;

    WifiTogglePoeNegotiationRequest wifi_toggle_poe_negotiation = 3025;

    WifiFactoryTestCommandRequest wifi_factory_test_command = 3026;

    WifiStartLocalTelemProxyRequest wifi_start_local_telem_proxy = 3027;

    WifiBackhaulStatsRequest wifi_backhaul_stats = 3029;

    WifiToggleUmbilicalModeRequest wifi_toggle_umbilical_mode = 3030;

    WifiClientSandboxRequest wifi_client_sandbox = 3031;

    WifiRunDebugNetsysRequest wifi_run_debug_netsys = 3032;

    WifiResetEthPhyRequest wifi_reset_eth_phy = 3033;

    WifiFlushHardwareNatRequest wifi_flush_hardware_nat = 3034;

    WifiWriteCalibrationRequest wifi_write_calibration = 3035;

    TransceiverIFLoopbackTestRequest transceiver_if_loopback_test = 4001;

    TransceiverGetStatusRequest transceiver_get_status = 4003;

    TransceiverGetTelemetryRequest transceiver_get_telemetry = 4004;

    Services.Unlock.StartUnlockRequest start_unlock = 5000;

    Services.Unlock.FinishUnlockRequest finish_unlock = 5001;

    GetDiagnosticsRequest get_diagnostics = 6000;
  }
}

message Response {
  reserved 1018, 1026, 2014, 2012, 2025, 3008, 3011, 3014, 3203;

  reserved "start_dish_self_test";

  uint64 id = 1;

  SpaceX.API.Status.Status status = 2;

  uint64 api_version = 3;

  oneof response {
    GetNextIdResponse get_next_id = 1006;

    EnableDebugTelemResponse enable_debug_telem = 1034;

    FactoryResetResponse factory_reset = 1011;

    GetDeviceInfoResponse get_device_info = 1004;

    GetLogResponse get_log = 1012;

    GetNetworkInterfacesResponse get_network_interfaces = 1015;

    GetPingResponse get_ping = 1009;

    PingHostResponse ping_host = 1016;

    RebootResponse reboot = 1001;

    SpeedTestResponse speed_test = 1003;

    SetSkuResponse set_sku = 1013;

    SetTrustedKeysResponse set_trusted_keys = 1010;

    UpdateResponse update = 1014;

    GetLocationResponse get_location = 1017;

    GetHeapDumpResponse get_heap_dump = 1019;

    RestartControlResponse restart_control = 1020;

    FuseResponse fuse = 1021;

    GetConnectionsResponse get_connections = 1023;

    StartSpeedtestResponse start_speedtest = 1027;

    GetSpeedtestStatusResponse get_speedtest_status = 1028;

    ReportClientSpeedtestResponse report_client_speedtest = 1029;

    InitiateRemoteSshResponse initiate_remote_ssh = 1030 [deprecated = true];

    SelfTestResponse self_test = 1031;

    SetTestModeResponse set_test_mode = 1032;

    SoftwareUpdateResponse software_update = 1033;

    GetRadioStatsResponse get_radio_stats = 1035;

    GetTimeResponse time = 1037;

    RunIperfServerResponse run_iperf_server = 1038;

    GetGoroutineStackTracesResponse get_goroutine_stack_traces = 1041;

    DishAuthenticateResponse dish_authenticate = 2005;

    DishGetContextResponse dish_get_context = 2003;

    DishGetHistoryResponse dish_get_history = 2006;

    DishGetStatusResponse dish_get_status = 2004;

    DishGetObstructionMapResponse dish_get_obstruction_map = 2008;

    DishStowResponse dish_stow = 2002;

    DishSetEmcResponse dish_set_emc = 2007;

    DishGetEmcResponse dish_get_emc = 2009;

    DishSetConfigResponse dish_set_config = 2010;

    DishGetConfigResponse dish_get_config = 2011;

    DishInhibitGpsResponse dish_inhibit_gps = 2013;

    DishClearObstructionMapResponse dish_clear_obstruction_map = 2015;

    DishSetMaxPowerTestModeResponse dish_set_max_power_test_mode = 2018;

    DishActivateRssiScanResponse dish_activate_rssi_scan = 2019;

    DishGetRssiScanResultResponse dish_get_rssi_scan_result = 2020;

    DishFactoryResetResponse dish_factory_reset = 2021;

    ResetButtonResponse reset_button = 2022;

    SetPerVehicleConfigResponse set_per_vehicle_config = 2023;

    DishAviationTestResponse dish_aviation_test = 2024;

    DishInhibitRfResponse dish_inhibit_rf = 2026;

    WifiAuthenticateResponse wifi_authenticate = 3005;

    WifiGetClientsResponse wifi_get_clients = 3002;

    WifiGetHistoryResponse wifi_get_history = 3006;

    WifiGetPingMetricsResponse wifi_get_ping_metrics = 3007;

    WifiGetStatusResponse wifi_get_status = 3004;

    WifiSetConfigResponse wifi_set_config = 3001;

    WifiGetConfigResponse wifi_get_config = 3009;

    WifiSetupResponse wifi_setup = 3003;

    WifiGetPersistentStatsResponse wifi_get_persistent_stats = 3022;

    WifiSetMeshDeviceTrustResponse wifi_set_mesh_device_trust = 3012;

    WifiSetMeshConfigResponse wifi_set_mesh_config = 3013 [deprecated = true];

    WifiGetClientHistoryResponse wifi_get_client_history = 3015;

    WifiSelfTestResponse wifi_self_test = 3016;

    WifiGuestInfoResponse wifi_guest_info = 3020;

    WifiRfTestResponse wifi_rf_test = 3021;

    WifiGetFirewallResponse wifi_get_firewall = 3024;

    WifiFactoryTestCommandResponse wifi_factory_test_command = 3025;

    WifiBackhaulStatsResponse wifi_backhaul_stats = 3026;

    WifiClientSandboxResponse wifi_client_sandbox = 3027;

    WifiUpdateResponse wifi_update = 3028;

    WifiRunDebugNetsysResponse wifi_run_debug_netsys = 3029;

    WifiResetEthPhyResponse wifi_reset_eth_phy = 3030;

    WifiFlushHardwareNatResponse wifi_flush_hardware_nat = 3031;

    TransceiverIFLoopbackTestResponse transceiver_if_loopback_test = 4001;

    TransceiverGetStatusResponse transceiver_get_status = 4003;

    TransceiverGetTelemetryResponse transceiver_get_telemetry = 4004;

    Services.Unlock.StartUnlockResponse start_unlock = 5000;

    Services.Unlock.FinishUnlockResponse finish_unlock = 5001;

    WifiGetDiagnosticsResponse wifi_get_diagnostics = 6000;

    DishGetDiagnosticsResponse dish_get_diagnostics = 6001;
  }
}

message Event {
  oneof event {
    WifiNewClientConnectedEvent wifi_new_client_connected = 3001;

    WifiAccountBondingEvent wifi_account_bonding = 3002;

    WifiNewPeerEvent wifi_new_peer = 3003;

    WifiCloudStatusEvent wifi_cloud_status = 3004;

    WifiClientSandboxRequest wifi_client_sandbox = 3005;
  }
}

message WifiCloudStatusEvent {
  uint32 api_version = 4;

  bool direct_link_to_dish = 1;

  string hardware_version = 2;

  bool is_bypassed = 3;
}

message WifiClientSandboxRequest {
  repeated WifiClientSandboxStatus client_sandbox_status = 1;

  repeated WifiClientSandboxAlert alerts = 2;

  uint64 unix_timestamp_ns = 3;
}

message WifiClientSandboxResponse {
}

message WifiWriteCalibrationRequest {
  bytes calibration_image = 1;
}

message WifiClientSandboxStatus {
  string client = 1;

  uint32 sandbox = 2;

  bool sandboxed = 3;
}

message EnableDebugTelemRequest {
  uint32 duration_m = 1;
}

message EnableDebugTelemResponse {
}

message FactoryResetRequest {
}

message FactoryResetResponse {
}

message GetTimeRequest {
}

message GetTimeResponse {
  int64 unix_nano = 1;
}

message FuseRequest {
  bool prevent_reboot = 1;
}

message FuseResponse {
}

message GetHistoryRequest {
}

message GetLogRequest {
}

message GetLogResponse {
  Logs current = 4;

  Logs saved = 5;

  string syslog = 1 [deprecated = true];

  string offline_log = 2 [deprecated = true];

  string persistent_log = 3 [deprecated = true];

  message Logs {
    string syslog = 1;

    string dmesg = 2;

    string kernel_panic = 3;

    string mtk_eth_procs = 4 [deprecated = true];

    string debug_netsys_0sec = 5;

    string debug_netsys_2sec = 6 [deprecated = true];
  }
}

message GetPingRequest {
}

message GetPingResponse {
  map<string, PingResult> results = 1;
}

message PingHostRequest {
  string address = 3;

  uint32 size = 4;
}

message PingHostResponse {
  PingResult result = 1;
}

message GetStatusRequest {
  RouterRole router_role = 1;
}

message RebootRequest {
}

message RebootResponse {
}

message SpeedTestStats {
  float latency_ms = 3 [deprecated = true];

  uint64 start_time = 4 [deprecated = true];

  int64 upload_start_time = 5;

  int64 download_start_time = 6;

  float upload_mbps = 1;

  float download_mbps = 2;

  Target target = 7;

  uint32 tcp_streams = 8;

  enum Target {
    UNKNOWN = 0;

    FASTCOM = 1;

    CLOUDFLARE = 2;
  }
}

message ClientPlatform {
  Platform platform = 1;

  float major_version = 2;

  float minor_version = 3;

  enum Platform {
    UNKNOWN = 0;

    IOS = 1;

    ANDROID = 2;

    WEB = 3;
  }
}

message SpeedTestRequest {
  uint32 id = 4;

  SpeedTestStats client_speedtest = 1;

  float client_rssi = 2;

  ClientPlatform client_platform = 3;
}

message SpeedTestResponse {
  float download_bps = 1 [deprecated = true];

  float upload_bps = 2 [deprecated = true];

  float latency_s = 3 [deprecated = true];

  float download_mbps = 4 [deprecated = true];

  float upload_mbps = 5 [deprecated = true];

  float latency_ms = 6 [deprecated = true];

  SpeedTestStats router_speedtest = 15;

  float download_mbps_1_tcp_conn = 7;

  float upload_mbps_1_tcp_conn = 8;

  float download_mbps_4_tcp_conn = 9;

  float upload_mbps_4_tcp_conn = 10;

  float download_mbps_16_tcp_conn = 11;

  float upload_mbps_16_tcp_conn = 12;

  float download_mbps_64_tcp_conn = 13;

  float upload_mbps_64_tcp_conn = 14;
}

message RunIperfServerRequest {
  uint32 duration_s = 1;
}

message RunIperfServerResponse {
  uint32 port = 1;
}

message GetConnectionsRequest {
}

message GetConnectionsResponse {
  map<string, ServiceConnection> services = 1;

  message ServiceConnection {
    string address = 1;

    int32 seconds_since_success = 2;
  }
}

message GetDeviceInfoRequest {
}

message GetDeviceInfoResponse {
  DeviceInfo device_info = 1;
}

message SetTrustedKeysRequest {
  repeated PublicKey keys = 1;
}

message SetTrustedKeysResponse {
}

message SetSkuRequest {
  string sku = 1;

  string country_code = 2;

  bool apply_country_code = 4;

  bool pin_country_code = 5;

  bool custom_power_table = 6;
}

message SetSkuResponse {
}

message UpdateRequest {
  optional bool schedule_reboot = 1;
}

message UpdateResponse {
}

message RestartControlRequest {
}

message RestartControlResponse {
}

message GetNetworkInterfacesRequest {
}

message GetNetworkInterfacesResponse {
  repeated NetworkInterface network_interfaces = 1006;
}

message GetRadioStatsRequest {
}

message GetRadioStatsResponse {
  repeated RadioStats radio_stats = 1;
}

message GetHeapDumpRequest {
}

message GetHeapDumpResponse {
  string heap_dump = 1;
}

message GetLocationRequest {
  PositionSource source = 1;
}

message GetLocationResponse {
  reserved 2;

  reserved "ecef";

  LLAPosition lla = 1;

  double sigma_m = 4;

  PositionSource source = 3;

  double horizontal_speed_mps = 5;

  double vertical_speed_mps = 6;
}

message DishSetEmcRequest {
  reserved 23;

  reserved "amplitude_taper_override";

  double theta = 1;

  double phi = 2;

  uint32 rx_chan = 3;

  uint32 tx_chan = 4;

  uint32 modulation = 5;

  double desired_tilt_angle = 7;

  bool chan_override = 8;

  bool theta_enabled = 9;

  bool phi_enabled = 10;

  bool idle = 11;

  bool fast_switching = 12;

  bool sky_search = 13;

  bool force_pll_unlock = 14;

  bool force_eirp_failure = 15;

  bool snow_active_override = 16;

  bool manual_tilting = 18;

  bool tilt_to_stowed = 19;

  bool reboot = 20;

  bool continuous_motor_test = 21;

  double distance_override_meters = 22;

  uint32 country_code_override = 24;

  int32 tx_duty_cycle_override = 25;

  int32 rx_duty_cycle_override = 26;

  double eirp_legal_limit_dbw_override = 27;

  double eirp_adjustment_db = 28;
}

message DishSetEmcResponse {
}

message DishSetMaxPowerTestModeRequest {
  bool enabled = 1;
}

message DishSetMaxPowerTestModeResponse {
  bool enabled = 1;
}

message DishGetEmcRequest {
}

message DishGetEmcResponse {
  reserved 26 to 29, 40, 59, 60, 61;

  reserved "baseline_heating", "additional_heating", "total_heating", "target_total_heating", "eirp_scale_override", "amplitude_taper_override", "amplitude_taper_enabled", "amplitude_taper_scale";

  string uuid = 2;

  uint64 timestamp = 3;

  uint32 cplane_updates = 11;

  double gps_latitude = 16;

  double gps_longitude = 17;

  double gps_pdop = 18;

  uint32 rf_mode = 19;

  double phi = 20;

  double theta = 21;

  uint32 rx_channel = 22;

  uint32 tx_channel = 23;

  float t_dbf_max = 24;

  double t_center = 25;

  bool auto_power_snow_melt_enabled = 30;

  double voltage = 32;

  uint32 rx_beam_state = 33;

  uint32 tx_beam_state = 34;

  uint32 half_duplex_state = 35;

  bool manual_tilt_enabled = 36;

  double tilt_angle = 37;

  uint32 pll_tx_lock_detected = 38;

  bool eirp_exceeded_threshold = 39;

  bool idle_override_enabled = 41;

  bool theta_override_enabled = 42;

  double theta_override_value = 43;

  bool phi_override_enabled = 44;

  double phi_override_value = 45;

  uint32 rx_chan_override_value = 46;

  uint32 tx_chan_override_value = 47;

  bool sky_search_override_enabled = 48;

  bool fast_switching_enabled = 49;

  uint32 modulation_override_value = 50;

  bool force_eirp_failure = 51;

  bool force_pll_unlock = 52;

  uint32 ut_ine_success = 53;

  bool rf_ready = 54;

  bool tilt_to_stowed = 55;

  bool reboot = 56;

  bool continuous_motor_test = 57;

  double distance_override_meters = 58;

  uint32 country_code_override = 62;

  double max_pointing_distance = 63;

  double distance_scaling_factor = 64;

  int32 tx_duty_cycle_override = 65;

  int32 rx_duty_cycle_override = 66;

  float tx_time_ms = 67;

  float rx_time_ms = 68;

  double eirp_legal_limit_dbw = 69;

  double eirp_legal_limit_dbw_override = 70;

  double eirp_adjustment_db = 71;

  double eirp_predicted_dbw = 72;
}

message GetPersistentStatsRequest {
}

message StartSpeedtestRequest {
}

message StartSpeedtestResponse {
}

message SpeedtestStatus {
  bool running = 1;

  uint32 id = 2;

  Direction up = 1000;

  Direction down = 1001;

  message Direction {
    repeated float throughputs_mbps = 1;

    SpeedtestError err = 2;
  }
}

message GetSpeedtestStatusRequest {
}

message GetSpeedtestStatusResponse {
  SpeedtestStatus status = 1;
}

message ReportClientSpeedtestRequest {
  uint32 id = 1;

  SpeedTestStats client_speedtest = 2;

  SpeedTestStats wifi_speedtest = 5;

  float client_rssi = 3;

  ClientPlatform client_platform = 4;

  string app_version = 6;

  uint32 app_build = 7;
}

message ReportClientSpeedtestResponse {
}

message SetPerVehicleConfigResponse {
}

message DishPowerSaveRequest {
  uint32 power_save_start_minutes = 1;

  uint32 power_save_duration_minutes = 2;

  bool enable_power_save = 3;
}

message IQCaptureRequest {
}

message GetDiagnosticsRequest {
}

message WifiGetDiagnosticsResponse {
  string id = 1;

  string hardware_version = 2;

  string software_version = 3;

  repeated Network networks = 4;

  message Network {
    string domain = 1;

    string ipv4 = 2;

    repeated string ipv6 = 3;

    uint32 clients_ethernet = 10;

    uint32 clients_2ghz = 11;

    uint32 clients_5ghz = 12;
  }
}

message DishGetDiagnosticsResponse {
  reserved 12, 13;

  reserved "dl_bandwidth_restricted_reason", "ul_bandwidth_restricted_reason";

  string id = 1;

  string hardware_version = 2;

  string software_version = 3;

  int32 utc_offset_s = 4;

  TestResult hardware_self_test = 7;

  repeated TestResultCode hardware_self_test_codes = 11;

  Alerts alerts = 5;

  DisablementCode disablement_code = 6;

  Location location = 8;

  AlignmentStats alignment_stats = 9;

  bool stowed = 10;

  bool overage_rate_limited = 14;

  message Alerts {
    reserved 9;

    reserved "moving_too_fast_for_policy";

    bool dish_is_heating = 1;

    bool dish_thermal_throttle = 2;

    bool dish_thermal_shutdown = 3;

    bool power_supply_thermal_throttle = 4;

    bool motors_stuck = 5;

    bool mast_not_near_vertical = 6;

    bool slow_ethernet_speeds = 7;

    bool software_install_pending = 8;

    bool obstructed = 10;
  }

  message Location {
    bool enabled = 1;

    double latitude = 2;

    double longitude = 3;

    double altitude_meters = 4;

    bool uncertainty_meters_valid = 5;

    double uncertainty_meters = 6;

    double gps_time_s = 7;
  }

  message AlignmentStats {
    float boresight_azimuth_deg = 1;

    float boresight_elevation_deg = 2;

    float desired_boresight_azimuth_deg = 3;

    float desired_boresight_elevation_deg = 4;
  }

  enum TestResult {
    NO_RESULT = 0;

    PASSED = 1;

    FAILED = 2;
  }

  enum TestResultCode {
    GENERAL = 0;

    BOOT_UP = 1;

    CPU_VOLTAGE = 2;

    DBF_AAP_CS = 3;

    DBF_NUM_FEMS = 4;

    DBF_READ_ERRORS = 5;

    DBF_T_DIE_0 = 6;

    DBF_T_DIE_1 = 7;

    DBF_T_DIE_0_VALID = 8;

    DBF_T_DIE_1_VALID = 9;

    ETH_PRIME = 10;

    EIRP = 11;

    FEM_CUT = 12;

    FUSE_AVS = 13;

    GPS = 14;

    IMU = 15;

    PHY = 16;

    SCP_ERROR = 17;

    TEMPERATURE = 18;

    VTSENS = 19;
  }

  enum DisablementCode {
    UNKNOWN = 0;

    OKAY = 1;

    NO_ACTIVE_ACCOUNT = 2;

    TOO_FAR_FROM_SERVICE_ADDRESS = 3;

    IN_OCEAN = 4;

    BLOCKED_COUNTRY = 6;

    DATA_OVERAGE_SANDBOX_POLICY = 7;

    CELL_IS_DISABLED = 8;

    ROAM_RESTRICTED = 10;

    UNKNOWN_LOCATION = 11;

    ACCOUNT_DISABLED = 12;

    UNSUPPORTED_VERSION = 13;

    MOVING_TOO_FAST_FOR_POLICY = 14;

    UNDER_AVIATION_FLYOVER_LIMITS = 15;

    BLOCKED_AREA = 16;

    reserved 5, 9;

    reserved "INVALID_COUNTRY", "UNLICENSED_COUNTRY";
  }
}

message TcpConnectivityTestRequest {
  string target = 1;

  uint32 port = 2;
}

message UdpConnectivityTestRequest {
  string target = 1;

  uint32 port = 2;

  UDPProbeDataType probe_data = 3;

  enum UDPProbeDataType {
    EMPTY = 0;

    DNS_STATUS_REQUEST = 1;

    DTLS_CLIENT_HELLO = 2;

    DNS_VERSION_BIND_REQ = 3;

    RPC_CHECK = 4;

    DNS_SD = 5;

    SNMP_V1_PUBLIC = 6;

    SNMP_V3_GET_REQUEST = 7;

    NTP_MESSAGE = 8;

    XDMCP = 9;

    KERBEROS = 10;

    SIP_OPTIONS = 11;

    LDAP_SEARCH_REQ = 12;

    MEMCACHED_STATS = 13;

    OPENVPN = 14;

    CIFS_NS_UC = 15;

    TFTP_GET = 16;

    DHCP_INFORM = 17;

    QUIC = 18;

    RIPV1 = 19;

    NFS_PROC_NULL = 20;

    COAP_REQUEST = 21;
  }
}

message GetGoroutineStackTracesRequest {
}

message GetGoroutineStackTracesResponse {
  string stack_traces = 1;
}

enum WifiClientSandboxAlert {
  SANDBOX_ALERT_UNKNOWN = 0;

  SANDBOX_ALERT_PORTAL = 1;

  SANDBOX_ALERT_GROUND_API = 2;

  SANDBOX_ALERT_STARLINK_API = 3;
}

enum PositionSource {
  AUTO = 0;

  NONE = 1;

  UT_INFO = 2;

  EXTERNAL = 3;

  GPS = 4;

  STARLINK = 5;

  GNC_FUSED = 6;

  GNC_BAD_SAT = 7;

  GNC_NO_ACCEL = 8;

  GNC_PNT = 9;

  GNC_STATIC = 10;
}

enum SpeedtestError {
  SPEEDTEST_ERROR_NONE = 0;

  SPEEDTEST_ERROR_UNKNOWN = 1;

  SPEEDTEST_ERROR_TOKEN = 2;

  SPEEDTEST_ERROR_API = 3;

  SPEEDTEST_ERROR_NO_RESULT = 4;

  SPEEDTEST_ERROR_OFFLINE = 5;
}

service Device {
  rpc Stream ( stream ToDevice ) returns ( stream FromDevice );

  rpc Handle ( Request ) returns ( Response );
}
