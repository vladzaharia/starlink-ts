syntax = "proto3";

package SpaceX.API.Device;

import "spacex_api/device/command.proto";

import "spacex_api/device/common.proto";

import "spacex_api/device/wifi_util.proto";

option go_package = "spacex.com/api/device";

message MeshConfig {
  reserved 6, 8;

  string display_name = 1;

  bool apply_display_name = 2;

  MeshAuth auth = 3;

  bool apply_auth = 4;

  int64 last_connected = 5;

  uint64 incarnation = 7;

  string hardware_version = 9;

  bool supports_5ghz_high = 10;
}

message TlsConfig {
  string key = 1;

  string cert = 2;

  string client_ca_cert = 3;

  string server_ca_cert = 4;
}

message HttpServer {
  reserved 101;

  reserved "pages_bundle_url";

  string domain_name = 1;

  TlsConfig tls = 2;

  string file_content_id = 3;

  string file_content_hash = 4;

  repeated string access_control_allow_origins = 5;
}

message CaptivePortal {
  string url = 1;

  bool display_in_captive_browser = 2;
}

message WifiConfig {
  reserved 1, 2, 4, 5, 6, 8, 10, 11, 14, 15, 16, 17, 18, 21, 24, 25, 27, 28, 29, 32, 34, 35, 36, 37, 38, 40, 41, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1021, 1041, 1051, 1052, 1053, 1056, 1057, 1102, 1103, 1104, 1105, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008;

  reserved "apply_enable_remote_ssh", "apply_lan_ipv4", "apply_network_name", "apply_network_name_5ghz", "apply_network_password", "apply_wifi_security", "enable_remote_ssh", "lan_ipv4", "last_remote_ssh_access", "network_name", "network_name_5ghz", "network_password", "wifi_security", "local_landing_domain", "apply_local_landing_domain", "local_landing", "apply_local_landing";

  string country_code = 3;

  bool apply_country_code = 1085;

  bool pin_country_code = 53;

  bool apply_pin_country_code = 1086;

  bool custom_power_table = 54;

  bool apply_custom_power_table = 1087;

  bool setup_complete = 7;

  bool apply_setup_complete = 1010;

  uint32 version = 9;

  string mac_wan = 12;

  string mac_lan = 13;

  uint32 channel_2ghz = 19;

  bool apply_channel_2ghz = 1013;

  uint32 channel_5ghz = 20;

  bool apply_channel_5ghz = 1014;

  uint32 channel_5ghz_high = 57;

  bool apply_channel_5ghz_high = 1016;

  map<string, MeshConfig> mesh_configs = 33;

  map<string, MeshConfig> mesh_configs_updates = 3033;

  bool apply_mesh_configs = 1033;

  repeated PublicKey dynamic_keys = 22;

  bool apply_dynamic_keys = 39;

  bool is_repeater = 23;

  bool apply_is_repeater = 1031;

  bool ap_mode = 51;

  bool apply_ap_mode = 1066;

  bool is_aviation = 49;

  bool apply_is_aviation = 1064;

  int32 boot_count = 26;

  BootInfo boot = 3001;

  repeated string nameservers = 30;

  bool apply_nameservers = 1054;

  bool secure_dns = 50;

  bool apply_secure_dns = 1065;

  bool bypass_mode = 31;

  bool apply_bypass_mode = 1055;

  bool dfs_enabled = 42;

  bool apply_dfs_enabled = 1058;

  bool disable_mesh_onboarding = 52;

  bool apply_disable_mesh_onboarding = 1067;

  bool disable_wireless_mesh_onboarding = 1097;

  bool apply_disable_wireless_mesh_onboarding = 1098;

  bool apply_http_server = 1107;

  HttpServer http_server = 1108;

  repeated Network networks = 1100;

  bool apply_networks = 1101;

  uint64 incarnation = 43;

  WirelessMode wireless_mode_2ghz = 44;

  bool apply_wireless_mode_2ghz = 1059;

  WirelessMode wireless_mode_5ghz = 45;

  bool apply_wireless_mode_5ghz = 1060;

  WirelessMode wireless_mode_5ghz_high = 58;

  bool apply_wireless_mode_5ghz_high = 1070;

  HTBandwidth ht_bandwidth_2ghz = 46;

  bool apply_ht_bandwidth_2ghz = 1061;

  HTBandwidth ht_bandwidth_5ghz = 47;

  bool apply_ht_bandwidth_5ghz = 1062;

  HTBandwidth ht_bandwidth_5ghz_high = 59;

  bool apply_ht_bandwidth_5ghz_high = 1071;

  VHTBandwidth vht_bandwidth = 48;

  bool apply_vht_bandwidth = 1063;

  VHTBandwidth vht_bandwidth_5ghz_high = 60;

  bool apply_vht_bandwidth_5ghz_high = 1072;

  bool use_public_services = 55;

  bool apply_use_public_services = 1068;

  bool disable_automated_speedtests = 56;

  bool apply_disable_automated_speedtests = 1069;

  bool enable_umbilical_vlan = 61;

  bool apply_enable_umbilical_vlan = 1073;

  repeated ClientName client_names = 62 [deprecated = true];

  bool apply_client_names = 1074 [deprecated = true];

  bool outdoor_mode = 63;

  bool apply_outdoor_mode = 1075;

  bool disable_2ghz = 64;

  bool apply_disable_2ghz = 1076;

  bool disable_5ghz = 65;

  bool apply_disable_5ghz = 1077;

  bool disable_5ghz_high = 66;

  bool apply_disable_5ghz_high = 1078;

  bool disable_x_mesh_backhaul = 67;

  bool apply_disable_x_mesh_backhaul = 1079;

  string golden_bssid = 68 [deprecated = true];

  bool apply_golden_bssid = 1080 [deprecated = true];

  IfaceType golden_iface_type = 69 [deprecated = true];

  bool apply_golden_iface_type = 1081 [deprecated = true];

  TxPowerLevel tx_power_level_2ghz = 70;

  bool apply_tx_power_level_2ghz = 1082;

  TxPowerLevel tx_power_level_5ghz = 71;

  bool apply_tx_power_level_5ghz = 1083;

  TxPowerLevel tx_power_level_5ghz_high = 72;

  bool apply_tx_power_level_5ghz_high = 1084;

  bool disable_pending_update_reboot = 73;

  bool apply_disable_pending_update_reboot = 1088;

  repeated ClientConfig client_configs = 74;

  bool apply_client_configs = 1089;

  bool disable_set_wifi_config_from_controller = 75;

  bool apply_disable_set_wifi_config_from_controller = 1090;

  bytes client_key = 76;

  bool apply_client_key = 1091;

  oneof wan_traffic_control {
    NoTrafficControl wan_no_traffic_control = 4001;

    AckSuppression wan_ack_suppression = 4002;

    CakeRateLimit wan_cake_rate_limit = 4003;
  }

  bool apply_wan_traffic_control = 1092;

  int32 wan_host_dscp_mark = 77;

  bool apply_wan_host_dscp_mark = 1093;

  bool debug_pop_pings = 79;

  bool apply_debug_pop_pings = 1095;

  bool debug_pings = 94;

  bool apply_debug_pings = 1106;

  bool client_tester = 80;

  bool apply_client_tester = 1096;

  uint32 asset_class = 81;

  bool apply_asset_class = 1099;

  bool disable_band_steering = 95;

  bool apply_disable_band_steering = 1109;

  repeated string only_overflight_countries = 1110;

  bool apply_only_overflight_countries = 1111;

  bool only_overflight_countries_using_default = 1114;

  repeated UnbridgedEthPort unbridged_eth_ports = 1112;

  bool apply_unbridged_eth_ports = 1113;

  bool disable_sandbox_fail_open = 1115;

  bool apply_disable_sandbox_fail_open = 1116;

  uint32 tag = 78;

  bool custom_dns_disabled = 1117;

  bool apply_custom_dns_disabled = 1118 [deprecated = true];

  message BasicServiceSet {
    reserved 1000, 1001, 1002, 1004, 1006, 2000, 1012, 1014, 1016;

    string bssid = 1003;

    string ssid = 1005;

    oneof auth {
      AuthOpen auth_open = 2001;

      AuthWpa2 auth_wpa2 = 2002;

      AuthWpa3 auth_wpa3 = 2003;

      AuthWpa2Wpa3 auth_wpa2_wpa3 = 2004;

      AuthRadius auth_radius = 2005;

      AuthOpenEncrypted auth_open_encrypted = 2006;

      AuthOnboardRadius auth_onboard_radius = 2007;
    }

    Band band = 1011;

    string iface_name = 1017;

    bool disable = 1013;

    bool hidden = 1015;
  }

  message DnsStaticEntry {
    repeated string domains = 1000;

    repeated string addresses = 1001;
  }

  message DnsForwardRule {
    repeated string domains = 1000;

    repeated string server_addresses = 1001;
  }

  message StaticRoute {
    string subnet = 1;

    string gateway = 2;
  }

  message Network {
    reserved 1000, 1001, 1002, 1004, 1005, 1006, 1018, 1019;

    reserved "client_authorization_required", "unauthorized_client_domain_allow_list";

    string ipv4 = 1003;

    uint32 dhcpv4_start = 1012;

    uint32 dhcpv4_end = 1025;

    bool dhcp_disabled = 1015;

    uint32 dhcpv4_lease_duration_s = 1016;

    string domain = 1011;

    repeated BasicServiceSet basic_service_sets = 1007;

    bool client_isolation = 1008;

    bool guest = 1009;

    string landing = 1010;

    bool landing_page_v2 = 1017;

    bool sandbox_enabled = 1020;

    repeated string sandbox_domain_allow_list = 1022;

    uint32 sandbox_id = 1023;

    bool internal = 1013;

    uint32 vlan = 1014;

    CaptivePortal captive_portal = 1024;

    uint32 network_groups = 1026;

    repeated DnsStaticEntry dns_static_entries = 1027;

    repeated DnsForwardRule dns_forward_rules = 1028;

    bool disable_when_offline_old = 1029 [deprecated = true];

    repeated StaticRoute static_routes = 1030;

    bool disable_when_offline = 1031;

    TlsConfig onboard_radius_tls_config = 1032;
  }

  message UnbridgedEthPort {
    uint32 lan_port_index = 1;

    string ip = 2;

    string gateway = 3;

    repeated StaticRoute static_routes = 4;

    oneof wan {
      WanNone wan_none = 5;

      WanStarlinkRouterPair wan_starlink_router_pair = 6;
    }

    message StaticRoute {
      string subnet = 1;

      uint32 network_groups = 2;
    }
  }

  enum Security {
    UNKNOWN = 0;

    WPA2 = 1;

    WPA3 = 2;

    WPA2WPA3 = 3;
  }

  enum Band {
    RF_UNKNOWN = 0;

    RF_2GHZ = 2;

    RF_5GHZ = 5;

    RF_5GHZ_HIGH = 6;
  }

  enum WirelessMode {
    WIRELESS_MODE_DEFAULT = 0;

    A_ONLY = 1;

    B_ONLY = 2;

    G_ONLY = 3;

    N_ONLY = 4;

    B_G_MIXED = 5;

    A_N_MIXED = 6;

    G_N_MIXED = 7;

    B_G_N_MIXED = 8;

    A_AN_AC_MIXED = 9;

    AN_AC_MIXED = 10;

    B_G_N_AX_MIXED = 11;

    A_AN_AC_AX_MIXED = 12;
  }

  enum HTBandwidth {
    HT_BANDWIDTH_DEFAULT = 0;

    HT_BANDWIDTH_20_MHZ = 1;

    HT_BANDWIDTH_20_OR_40_MHZ = 2;
  }

  enum VHTBandwidth {
    VHT_BANDWIDTH_DEFAULT = 0;

    VHT_BANDWIDTH_DISABLED = 1;

    VHT_BANDWIDTH_80_MHZ = 2;

    VHT_BANDWIDTH_160_MHZ = 3;

    VHT_BANDWIDTH_80_PLUS_80_MHZ = 4;
  }
}

message WanNone {
}

message WanStarlinkRouterPair {
  bool client_vlan_first = 1;
}

message WeeklyBlockSchedule {
  repeated BlockRange block_ranges = 1;

  string group_id = 2;

  message BlockRange {
    uint32 start_minutes = 1;

    uint32 end_minutes = 2;
  }
}

message ClientConfig {
  reserved 4;

  reserved "weekly_block_schedule";

  uint32 client_id = 1;

  string mac_address = 2;

  string given_name = 3;

  repeated WeeklyBlockSchedule weekly_block_schedules = 5;

  string group_id = 6;
}

message ClientName {
  string mac_address = 1;

  string given_name = 2;
}

message AuthOpen {
}

message AuthWpa2 {
  string password = 1;
}

message AuthWpa3 {
  string password = 1;
}

message AuthWpa2Wpa3 {
  string password = 1;
}

message AuthOpenEncrypted {
}

message AuthRadius {
  string server = 1;

  string server_ca = 3 [deprecated = true];

  string server_ca_base_64 = 4;

  string password = 2;

  Protocol transport = 5;
}

message AuthOnboardRadius {
}

message NoTrafficControl {
}

message AckSuppression {
  uint32 ack_mark = 1 [deprecated = true];

  float htb_ack_queue_rate = 2;

  float htb_ack_queue_ceil = 3;

  float cake_queue_bandwidth = 4;

  bool cake_ack_filter_aggressive = 5;

  float cake_manual_rtt = 6;
}

message CakeRateLimit {
  uint32 host_mark = 1 [deprecated = true];

  float bandwidth = 2;

  CakePriorityQueueParameter priority_queue_parameter = 3;

  CakeAckFilter ack_filter = 4;

  float manual_rtt = 6;
}

enum MeshAuth {
  MESH_AUTH_UNKNOWN = 0;

  MESH_AUTH_NEW = 1;

  MESH_AUTH_TRUSTED = 2;

  MESH_AUTH_UNTRUSTED = 3;
}

enum CakeAckFilter {
  NO_ACK_FILTER = 0;

  ACK_FILTER = 1;

  ACK_FILTER_AGGRESSIVE = 2;
}

enum CakePriorityQueueParameter {
  DIFFSERV3 = 0;

  DIFFSERV4 = 1;

  PRECEDENCE = 2;

  BEST_EFFORT = 3;
}
